// VARIANTS BEGIN
// VARIANTS END

#define PI 3.14159265359f

cbuffer Roughness : register(b0)
{
	float roughness;
};

TextureCube cubemap : register(t0);
SamplerState cubemapSampler : register(s0);

float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

float2 Hammersley(uint i, uint N)
{
    return float2(float(i)/float(N), RadicalInverse_VdC(i));
} 

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
	const float a = roughness * roughness;

	const float phi = 2.0f * PI * Xi.x;
	const float cosTheta = sqrt((1.0f - Xi.y) / (1.0f + (a * a - 1.0f) * Xi.y));
	const float sinTheta = sqrt(1.0f - cosTheta * cosTheta);

	// from sphreical coords to cartesian coords
	float3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	// from tangent-space to world space
	const float3 up = abs(N.z) < 0.999 ? float3(0, 0, 1) : float3(1, 0, 0);
	const float3 tangent = normalize(cross(up, N));
	const float3 bitangent = cross(N, tangent);

	const float3 sample = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sample);
} 

float NormalDistributionGGX(float NdotH, float roughness)
{
    float roughnessSquare = roughness * roughness;
    float a2 = roughnessSquare * roughnessSquare;

    float num = a2;
    float denom = (NdotH * NdotH * (a2 - 1.0f) + 1.0f);
    denom = PI * denom * denom;

    if (denom < 0.00000001f) return 1.0f;
    return num / denom;
}

float4 main(float3 localPosition : LOCALPOSITION) : SV_TARGET
{
	float3 N = normalize(localPosition);    
    float3 R = N;
    float3 V = R;

	float3 prefilteredColor = float3(0.0f,0.0f,0.0f);
	float totalWeight = 0.0f;

	const uint sampleCount = 1024;

	for(uint i = 0; i < sampleCount; i++)
	{
		float2 Xi = Hammersley(i, sampleCount);
        float3 H  = ImportanceSampleGGX(Xi, N, roughness);
        float3 L  = normalize(2.0 * dot(V, H) * H - V);


		float HdotV = max(dot(H,V), 0.0f);
		float NdotH = max(dot(N,H), 0.0f);
		float NdotL = max(dot(N,L), 0.0f);

		if(NdotL > 0.0f)
		{
			float D = NormalDistributionGGX(NdotH, roughness);
			float pdf = D * NdotH / (4.0f * HdotV + 0.00001) + 0.0001;
			float resolution = 512.0; // resolution of source cubemap (per face)
			float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
			float saSample = 1.0 / (float(sampleCount) * pdf + 0.0001);
			float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);
			prefilteredColor += cubemap.SampleLevel(cubemapSampler, L, mipLevel).rgb * NdotL;
			totalWeight += NdotL;
		}
	}

	prefilteredColor /= totalWeight;

	return float4(prefilteredColor,1.0f);
}