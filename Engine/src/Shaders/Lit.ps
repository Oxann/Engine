// VARIANTS BEGIN
// DIFFUSETEXTURE
// SPECULARTEXTURE
// NORMALTEXTURE
// SHADOW
// VARIANTS END

#include "Light.hlsli"

struct IN
{
    float3 viewSpacePosition : VIEWSPACEPOSITION;
    float3 normal : VIEWSPACENORMAL;
    
#if defined(DIFFUSETEXTURE) || defined(SPECULARTEXTURE) || defined(NORMALTEXTURE)
    float2 texCoord : TEXCOORD;
#endif 
    
#ifdef NORMALTEXTURE
    float3 tangent : TANGENT;
    float3 bitangent : BITANGENT;
#endif

#ifdef SHADOW
    float4 lightSpacePosition : LIGHTSPACEPOSITION;
#endif
};

//Material 
cbuffer Material : register(b3)
{
    float4 matDiffuseColor;
    float4 matSpecularColor;
    float matShininess;
    float matShininessStrength;
}

//Textures
Texture2D diffuseTexture : register(t0);
SamplerState diffuseTextureSampler : register(s0);

Texture2D specularTexture : register(t1);
SamplerState specularTextureSampler : register(s1);

Texture2D normalTexture : register(t2);
SamplerState normalTextureSampler : register(s2);


#ifdef SHADOW
float3 CalculateDirectionalLights(float3 normal, float3 viewSpacePosition, float3 diffuseColor, float3 specularColor, float shininess, float3 lightSpacePosition)
#else
float3 CalculateDirectionalLights(float3 normal, float3 viewSpacePosition, float3 diffuseColor, float3 specularColor, float shininess)
#endif
{
    float3 totalDiffuse = { 0.0f, 0.0f, 0.0f };
    float3 totalSpecular = { 0.0f, 0.0f, 0.0f };
    
    float3 viewVec = normalize(-viewSpacePosition);

    [unroll]
    for (uint i = 0; i < DirectionalLightCount && i < MAX_DIRECTIONAL_LIGHT_COUNT; i++)
    {
#ifdef SHADOW
        float2 shadowMapCoord;
        shadowMapCoord.x = lightSpacePosition.x;
        shadowMapCoord.y = -lightSpacePosition.y;

        shadowMapCoord = shadowMapCoord * 0.5f + 0.5f;

        float shadow = 1.0f; // 0 is full shadow
        if(HASSOFTSHADOWS(directionalLights[0]) && lightSpacePosition.z < 1.0f)
        {
            shadow = shadowMap.SampleCmpLevelZero(softShadowsSampler, shadowMapCoord, lightSpacePosition.z);
        }
        else
        {
            float lightDist = shadowMap.Sample(hardShadowsSampler, shadowMapCoord).r;
            if(lightDist < lightSpacePosition.z)
                shadow = 0.0f;
        }
#endif              
        float diffuse = max(dot(-directionalLights[i].direction, normal), 0.0f);
        if (diffuse < MINLIGHT)
            continue;
        
        float3 halfwayVec = normalize(-directionalLights[i].direction + viewVec);
        float specular = pow(max(dot(halfwayVec, normal), 0.0f), shininess);
        
        totalDiffuse += diffuse * directionalLights[i].light.rgb;
        totalSpecular += specular * directionalLights[i].light.rgb;

#ifdef SHADOW
        totalDiffuse *= shadow;
        totalSpecular *= shadow;
#endif
    }
            
    return totalDiffuse * diffuseColor.rgb + totalSpecular * specularColor.rgb * matShininessStrength;
}

float3 CalculatePointLights(float3 normal, float3 viewSpacePosition, float3 diffuseColor, float3 specularColor, float shininess)
{
    float3 totalDiffuse = { 0.0f, 0.0f, 0.0f };
    float3 totalSpecular = { 0.0f, 0.0f, 0.0f };
    
    float3 viewVec = normalize(-viewSpacePosition);
    
    for (uint i = 0; i < PointLightCount && i < MAX_POINT_LIGHT_COUNT; i++)
    {
        float3 lightDirection = viewSpacePosition - pointLights[i].position;
        float distance = length(lightDirection);
        lightDirection /= distance;
        float diffuse = max(dot(-lightDirection, normal), 0.0f);
        if (diffuse < MINLIGHT)
            continue;
           
        float3 halfwayVec = normalize(-lightDirection + viewVec);
        float specular = pow(max(dot(halfwayVec, normal), 0.0f), shininess);
        float attenuation = 1.0f / (PointLight_Constant + PointLight_Linear * distance + PointLight_Quadratic * distance * distance);
        
        totalDiffuse += diffuse * pointLights[i].light.rgb * attenuation;
        totalSpecular += specular * pointLights[i].light.rgb * attenuation;
    }
    
    return totalDiffuse * diffuseColor.rgb + totalSpecular * specularColor.rgb * matShininessStrength;
}

float4 main(IN in_) : SV_Target
{
    in_.normal = normalize(in_.normal);
    
	float4 diffuseColor = matDiffuseColor;
	float4 specularColor = matSpecularColor;
    
#ifdef DIFFUSETEXTURE
    diffuseColor *= diffuseTexture.Sample(diffuseTextureSampler, in_.texCoord); 
#endif
  
#ifdef SPECULARTEXTURE
    specularColor *= specularTexture.Sample(specularTextureSampler, in_.texCoord);
    float shininess = pow(2.0f, 13.0f * matShininess * specularColor.a);
#else
	float shininess = pow(2.0f, 13.0f * matShininess);
#endif
   
#ifdef NORMALTEXTURE
    in_.normal = normalize(mul(normalTexture.Sample(normalTextureSampler, in_.texCoord).rgb * 2.0f - 1.0f,
                 float3x3(normalize(in_.tangent), normalize(in_.bitangent), normalize(in_.normal))));
#endif
    

    //Lighting   
    float3 phong = diffuseColor.rgb +
#ifdef SHADOW
               CalculateDirectionalLights(in_.normal, in_.viewSpacePosition, diffuseColor.rgb, specularColor.rgb, shininess, in_.lightSpacePosition.xyz) +
#else
               CalculateDirectionalLights(in_.normal, in_.viewSpacePosition, diffuseColor.rgb, specularColor.rgb, shininess) +
#endif
               CalculatePointLights(in_.normal, in_.viewSpacePosition, diffuseColor.rgb, specularColor.rgb, shininess);

    return float4(phong, diffuseColor.a);
}